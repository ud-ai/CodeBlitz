(()=>{chrome.runtime.onInstalled.addListener(()=>{console.log("CodeBlitz Extension Installed")});chrome.runtime.onMessage.addListener((s,y,l)=>{if(s.type==="AI_QUERY"){let d=s.prompt||s.message,m=s.problemStatement||"",p=s.mode==="interview"?"interview":"normal";return(async()=>{try{let e="AIzaSyDXj0nlNs5Z6S0OpEBSWdGh29hw9IrBUOo";if(!e)return{answer:"\u26A0\uFE0F Gemini API key missing. Set GEMINI_API_KEY in .env and rebuild."};let o=new AbortController,u=setTimeout(()=>o.abort(),25e3);try{let a="gemini-2.0-flash",w="gemini-1.5-flash",h=t=>({contents:[{role:"user",parts:[{text:m?`Problem context:
${m}

User message:
${d}`:d}]}],...t?{}:{systemInstruction:{role:"system",parts:[{text:p==="interview"?["You are an expert LeetCode interviewer and mentor.","- Ask ONE concise question at a time.","- Prefer hints over solutions.","- Keep replies under 120 words.","- Use simple Markdown for lists.","- When user requests code, provide only a small snippet and explain in comments."].join(`
`):["You are a helpful coding mentor.","- Provide clear, concise guidance.","- When explicitly asked for code, provide a minimal, correct solution with the exact language the user is using on the page (deduce from LeetCode language snippet if possible; default to JavaScript).","- Wrap code in fenced Markdown blocks with language tags, keep under 80 cols where practical.","- Prefer stepwise reasoning and bullets."].join(`
`)}]}},generationConfig:{temperature:p==="interview"?.6:.7,maxOutputTokens:700}});async function c(t,i){return await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${t}:generateContent`,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":e},body:JSON.stringify(h(i)),signal:o.signal})}let r=await c(a,!1);if(!r.ok&&r.status===400&&(r=await c(a,!0)),!r.ok&&r.status===400&&(r=await c(w,!0)),!r.ok){let t=`API responded with status: ${r.status}`;try{let i=await r.json();i?.error?.message&&(t+=` - ${i.error.message}`)}catch{}throw new Error(t)}if(clearTimeout(u),!r.ok)throw new Error(`API responded with status: ${r.status}`);let n=await r.json();console.log("Gemini response data:",n);let g=n?.candidates?.[0]?.content?.parts||[],f=Array.isArray(g)?g.map(t=>typeof t?.text=="string"?t.text:t?.inlineData?.data?atob(t.inlineData.data):"").join("")?.trim():"";return f?{answer:f}:n?.error?(console.error("Gemini API Error:",n.error),{answer:`Gemini API error: ${n.error.message} (code: ${n.error.code||"unknown"})`}):n?.promptFeedback?.blockReason?{answer:`Response blocked by safety: ${n.promptFeedback.blockReason}`}:{answer:"No valid response received from AI (empty candidates)."}}catch(a){throw a instanceof Error&&a.name==="AbortError"?new Error("Request timed out. Please try again."):a}finally{clearTimeout(u)}}catch(e){return console.error("Fetch error:",e),{error:e instanceof Error?e.message:String(e),answer:"Network or Gemini error: "+(e instanceof Error?e.message:String(e))}}})().then(e=>{try{l(e)}catch(o){console.error("Error sending response:",o)}}).catch(e=>{console.error("Unexpected error in fetchData:",e);try{l({answer:"Unexpected error: "+(e instanceof Error?e.message:String(e))})}catch(o){console.error("Error sending error response:",o)}}),!0}});})();
